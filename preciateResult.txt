第1步
符号栈:<程序> # 
输入栈:struct id { type * id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<程序>-><结构体定义><函数定义>

第2步
符号栈:<结构体定义> <函数定义> # 
输入栈:struct id { type * id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<结构体定义>->structid{<结构体成员列表>};

第3步
符号栈:struct id { <结构体成员列表> } ; <函数定义> # 
输入栈:struct id { type * id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第4步
符号栈:id { <结构体成员列表> } ; <函数定义> # 
输入栈:id { type * id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第5步
符号栈:{ <结构体成员列表> } ; <函数定义> # 
输入栈:{ type * id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第6步
符号栈:<结构体成员列表> } ; <函数定义> # 
输入栈:type * id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<结构体成员列表>-><类型>id;<结构体成员列表>

第7步
符号栈:<类型> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:type * id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<类型>->type<取地址>

第8步
符号栈:type <取地址> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:type * id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第9步
符号栈:<取地址> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:* id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<取地址>-><星号闭包>

第10步
符号栈:<星号闭包> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:* id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<星号闭包>-><星号><星号闭包>

第11步
符号栈:<星号> <星号闭包> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:* id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<星号>->*

第12步
符号栈:* <星号闭包> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:* id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第13步
符号栈:<星号闭包> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<星号闭包>->$

第14步
符号栈:id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第15步
符号栈:; <结构体成员列表> } ; <函数定义> # 
输入栈:; type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第16步
符号栈:<结构体成员列表> } ; <函数定义> # 
输入栈:type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<结构体成员列表>-><类型>id;<结构体成员列表>

第17步
符号栈:<类型> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<类型>->type<取地址>

第18步
符号栈:type <取地址> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:type id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第19步
符号栈:<取地址> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<取地址>-><星号闭包>

第20步
符号栈:<星号闭包> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<星号闭包>->$

第21步
符号栈:id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第22步
符号栈:; <结构体成员列表> } ; <函数定义> # 
输入栈:; type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第23步
符号栈:<结构体成员列表> } ; <函数定义> # 
输入栈:type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<结构体成员列表>-><类型>id;<结构体成员列表>

第24步
符号栈:<类型> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<类型>->type<取地址>

第25步
符号栈:type <取地址> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:type id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第26步
符号栈:<取地址> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<取地址>-><星号闭包>

第27步
符号栈:<星号闭包> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<星号闭包>->$

第28步
符号栈:id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第29步
符号栈:; <结构体成员列表> } ; <函数定义> # 
输入栈:; type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第30步
符号栈:<结构体成员列表> } ; <函数定义> # 
输入栈:type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<结构体成员列表>-><类型>id;<结构体成员列表>

第31步
符号栈:<类型> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<类型>->type<取地址>

第32步
符号栈:type <取地址> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:type id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第33步
符号栈:<取地址> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<取地址>-><星号闭包>

第34步
符号栈:<星号闭包> id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<星号闭包>->$

第35步
符号栈:id ; <结构体成员列表> } ; <函数定义> # 
输入栈:id ; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第36步
符号栈:; <结构体成员列表> } ; <函数定义> # 
输入栈:; } ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第37步
符号栈:<结构体成员列表> } ; <函数定义> # 
输入栈:} ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<结构体成员列表>->$

第38步
符号栈:} ; <函数定义> # 
输入栈:} ; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第39步
符号栈:; <函数定义> # 
输入栈:; type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第40步
符号栈:<函数定义> # 
输入栈:type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<函数定义>-><修饰词闭包><类型><变量>(<参数声明>){<函数块>}

第41步
符号栈:<修饰词闭包> <类型> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<修饰词闭包>->$

第42步
符号栈:<类型> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<类型>->type<取地址>

第43步
符号栈:type <取地址> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:type id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第44步
符号栈:<取地址> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<取地址>-><星号闭包>

第45步
符号栈:<星号闭包> <变量> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<星号闭包>->$

第46步
符号栈:<变量> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<变量>-><标志符><数组下标>

第47步
符号栈:<标志符> <数组下标> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<标志符>->id

第48步
符号栈:id <数组下标> ( <参数声明> ) { <函数块> } # 
输入栈:id ( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第49步
符号栈:<数组下标> ( <参数声明> ) { <函数块> } # 
输入栈:( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<数组下标>->$

第50步
符号栈:( <参数声明> ) { <函数块> } # 
输入栈:( ) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第51步
符号栈:<参数声明> ) { <函数块> } # 
输入栈:) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<参数声明>->$

第52步
符号栈:) { <函数块> } # 
输入栈:) { type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第53步
符号栈:{ <函数块> } # 
输入栈:{ type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第54步
符号栈:<函数块> } # 
输入栈:type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<函数块>-><声明语句闭包><函数块闭包>

第55步
符号栈:<声明语句闭包> <函数块闭包> } # 
输入栈:type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<声明语句闭包>-><声明语句><声明语句闭包>

第56步
符号栈:<声明语句> <声明语句闭包> <函数块闭包> } # 
输入栈:type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<声明语句>-><声明>;

第57步
符号栈:<声明> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<声明>-><修饰词闭包><类型><变量><赋初值>

第58步
符号栈:<修饰词闭包> <类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<修饰词闭包>->$

第59步
符号栈:<类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<类型>->type<取地址>

第60步
符号栈:type <取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:type id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第61步
符号栈:<取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<取地址>-><星号闭包>

第62步
符号栈:<星号闭包> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<星号闭包>->$

第63步
符号栈:<变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<变量>-><标志符><数组下标>

第64步
符号栈:<标志符> <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<标志符>->id

第65步
符号栈:id <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:id , id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
匹配!
第66步
符号栈:<数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:, id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<数组下标>->$

第67步
符号栈:<赋初值> ; <声明语句闭包> <函数块闭包> } # 
输入栈:, id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
所用推出式：<赋初值>->$

第68步
符号栈:; <声明语句闭包> <函数块闭包> } # 
输入栈:, id , id = digit ; type id = digit ; id id [ digit ] = { { string , digit , digit , digit } , { string , digit , digit , digit } } ; if ( id [ digit ] . id < digit ) id = digit ; else id = digit ; id ( string , id ) ; } # 
Error
